{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/Personal projects/react/chat-room/client/src/components/UserList.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Avatar, useChatContext } from 'stream-chat-react';\nimport { InviteIcon } from '../assets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListContainer = _ref => {\n  let {\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-list__container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-list__header\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Invite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ListContainer;\n\nconst UserItem = _ref2 => {\n  _s();\n\n  let {\n    user,\n    setSelectedUsers\n  } = _ref2;\n  const [selected, setSelected] = useState(false);\n\n  const handelSelect = () => {\n    if (selected) {\n      setSelectedUsers(prevUsers => prevUsers.filter(prevUser => prevUser !== user.id));\n    } else {\n      setSelectedUsers(prevUser => [...prevUsers, user.id]);\n    }\n\n    setSelected(prevSelected => !prevSelected);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-item__wrapper\",\n    onClick: handelSelect,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-item__name-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        image: user.image,\n        name: user.fullName || user.id,\n        size: 32\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"user-item__name\",\n        children: [user.fullName || user.id, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), selected ? /*#__PURE__*/_jsxDEV(InviteIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-item__invite-empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserItem, \"jTu/AeLw5BOy6ZW1dDNXzAJjzwE=\");\n\n_c2 = UserItem;\n\nconst UserList = _ref3 => {\n  _s2();\n\n  let {\n    setSelectedUsers\n  } = _ref3;\n  const {\n    client\n  } = useChatContext();\n  const [users, setUseres] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [lisyEmpty, setListEmpty] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const getUsers = async () => {\n      if (loading) return;\n      setLoading(true);\n\n      try {\n        const response = await client.queryUsers( // {id:{$ne: client.userId}},\n        {}, {\n          id: 1\n        }, {\n          limit: 8\n        });\n\n        if (response.users.length) {\n          setUseres(response.users);\n        } else {\n          setListEmpty(true);\n        }\n      } catch (error) {\n        setError(true);\n      }\n\n      setLoading(false);\n    };\n\n    if (client) getUsers();\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ListContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-list__message\",\n        children: \"Error loading, please refresh and try againe.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (lisyEmpty) {\n    return /*#__PURE__*/_jsxDEV(ListContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-list__message\",\n        children: \"No user found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ListContainer, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-list__message\",\n      children: \"Loading users ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 24\n    }, this) : users === null || users === void 0 ? void 0 : users.map((user, i) => /*#__PURE__*/_jsxDEV(UserItem, {\n      index: i,\n      user: user,\n      setSelectedUsers: setSelectedUsers\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(UserList, \"SUBJGmzlJlhFuP8TvPNUnYrcZMo=\", false, function () {\n  return [useChatContext];\n});\n\n_c3 = UserList;\nexport default UserList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ListContainer\");\n$RefreshReg$(_c2, \"UserItem\");\n$RefreshReg$(_c3, \"UserList\");","map":{"version":3,"sources":["/Users/macbook/Documents/Personal projects/react/chat-room/client/src/components/UserList.js"],"names":["React","useState","useEffect","Avatar","useChatContext","InviteIcon","ListContainer","children","UserItem","user","setSelectedUsers","selected","setSelected","handelSelect","prevUsers","filter","prevUser","id","prevSelected","image","fullName","UserList","client","users","setUseres","loading","setLoading","lisyEmpty","setListEmpty","error","setError","getUsers","response","queryUsers","limit","length","map","i"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,mBAAvC;AAGA,SAASC,UAAT,QAA2B,WAA3B;;;AAEA,MAAMC,aAAa,GAAG,QAAgB;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAClC,sBACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAKKA,QALL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAVD;;KAAMD,a;;AAYN,MAAME,QAAQ,GAAG,SAA8B;AAAA;;AAAA,MAA7B;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAA6B;AAE3C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMY,YAAY,GAAG,MAAM;AACvB,QAAGF,QAAH,EAAa;AACTD,MAAAA,gBAAgB,CAAEI,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAkBC,QAAD,IAAcA,QAAQ,KAAKP,IAAI,CAACQ,EAAjD,CAAhB,CAAhB;AACH,KAFD,MAEM;AACFP,MAAAA,gBAAgB,CAAEM,QAAD,IAAc,CAAC,GAAGF,SAAJ,EAAeL,IAAI,CAACQ,EAApB,CAAf,CAAhB;AACH;;AACDL,IAAAA,WAAW,CAAEM,YAAD,IAAkB,CAACA,YAApB,CAAX;AACH,GAPD;;AASA,sBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAoC,IAAA,OAAO,EAAEL,YAA7C;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAEJ,IAAI,CAACU,KAApB;AAA2B,QAAA,IAAI,EAAEV,IAAI,CAACW,QAAL,IAAiBX,IAAI,CAACQ,EAAvD;AAA2D,QAAA,IAAI,EAAE;AAAjE;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,iBAAb;AAAA,mBAAgCR,IAAI,CAACW,QAAL,IAAiBX,IAAI,CAACQ,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAMKN,QAAQ,gBAAG,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAmB;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YANhC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAvBD;;GAAMH,Q;;MAAAA,Q;;AA2BN,MAAMa,QAAQ,GAAG,SAAwB;AAAA;;AAAA,MAAvB;AAACX,IAAAA;AAAD,GAAuB;AAErC,QAAM;AAACY,IAAAA;AAAD,MAAWlB,cAAc,EAA/B;AACA,QAAM,CAACmB,KAAD,EAAQC,SAAR,IAAqBvB,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACwB,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAAC0B,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC4B,KAAD,EAAQC,QAAR,IAAmB7B,QAAQ,CAAC,KAAD,CAAjC;AAIAC,EAAAA,SAAS,CAAC,MAAK;AACZ,UAAM6B,QAAQ,GAAG,YAAY;AACzB,UAAGN,OAAH,EAAY;AAEZC,MAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,UAAI;AACC,cAAMM,QAAQ,GAAG,MAAMV,MAAM,CAACW,UAAP,EACnB;AACA,UAFmB,EAGnB;AAAChB,UAAAA,EAAE,EAAE;AAAL,SAHmB,EAInB;AAACiB,UAAAA,KAAK,EAAE;AAAR,SAJmB,CAAvB;;AAMA,YAAGF,QAAQ,CAACT,KAAT,CAAeY,MAAlB,EAA0B;AACtBX,UAAAA,SAAS,CAACQ,QAAQ,CAACT,KAAV,CAAT;AACH,SAFD,MAEO;AACHK,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;AACL,OAZD,CAYE,OAAOC,KAAP,EAAc;AACZC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KArBD;;AAsBA,QAAGJ,MAAH,EAAUS,QAAQ;AACpB,GAxBQ,EAwBP,EAxBO,CAAT;;AA0BA,MAAGF,KAAH,EAAU;AACN,wBACI,QAAC,aAAD;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAED,MAAGF,SAAH,EAAc;AACV,wBACI,QAAC,aAAD;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAED,sBACI,QAAC,aAAD;AAAA,cACKF,OAAO,gBAAG;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,GAGJF,KAHI,aAGJA,KAHI,uBAGJA,KAAK,CAAEa,GAAP,CAAW,CAAC3B,IAAD,EAAO4B,CAAP,kBACP,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,CAAjB;AAAoC,MAAA,IAAI,EAAG5B,IAA3C;AAAiD,MAAA,gBAAgB,EAAEC;AAAnE,OAA2BD,IAAI,CAACQ,EAAhC;AAAA;AAAA;AAAA;AAAA,YADJ;AAJR;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAnED;;IAAMI,Q;UAEejB,c;;;MAFfiB,Q;AAqEN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Avatar, useChatContext } from 'stream-chat-react';\n\n\nimport { InviteIcon } from '../assets';\n\nconst ListContainer = ({children}) => {\n    return (\n        <div className=\"user-list__container\">\n            <div className=\"user-list__header\">\n                <p>User</p>\n                <p>Invite</p>\n            </div>\n            {children}\n        </div>\n    )\n};\n\nconst UserItem = ({user, setSelectedUsers}) => {\n\n    const [selected, setSelected] = useState(false);\n\n    const handelSelect = () => {\n        if(selected) {\n            setSelectedUsers((prevUsers) => prevUsers.filter((prevUser) => prevUser !== user.id))\n        }else {\n            setSelectedUsers((prevUser) => [...prevUsers, user.id])\n        }\n        setSelected((prevSelected) => !prevSelected);\n    }\n\n    return (\n        <div className=\"user-item__wrapper\" onClick={handelSelect}>\n            <div className=\"user-item__name-wrapper\">\n                <Avatar image={user.image} name={user.fullName || user.id} size={32} />\n                <p className=\"user-item__name\">{user.fullName || user.id} </p>\n              \n            </div>\n            {selected ? <InviteIcon/> : <div className=\"user-item__invite-empty\"></div>}\n        </div>\n    )\n};\n\n\n\nconst UserList = ({setSelectedUsers}) => {\n\n    const {client} = useChatContext();\n    const [users, setUseres] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [lisyEmpty, setListEmpty] = useState(false);\n    const [error, setError]= useState(false)\n\n\n\n    useEffect(()=> {\n       const getUsers = async () => {\n           if(loading) return;\n\n           setLoading(true);\n\n           try {\n                const response = await client.queryUsers(\n                    // {id:{$ne: client.userId}},\n                    {},\n                    {id: 1 },\n                    {limit: 8 }\n                );\n                if(response.users.length) {\n                    setUseres(response.users)\n                } else {\n                    setListEmpty(true);\n                }\n           } catch (error) {\n               setError(true);\n           }\n           setLoading(false);\n       }\n       if(client)getUsers()\n    },[])\n\n    if(error) {\n        return (\n            <ListContainer>\n                <div className=\"user-list__message\">\n                    Error loading, please refresh and try againe.\n                </div>\n            </ListContainer>\n        )\n    }\n\n    if(lisyEmpty) {\n        return (\n            <ListContainer>\n                <div className=\"user-list__message\">\n                   No user found\n                </div>\n            </ListContainer>\n        )\n    }\n\n    return (\n        <ListContainer>\n            {loading ? <div className=\"user-list__message\">\n                Loading users ...\n            </div> : (\n                users?.map((user, i) => (\n                    <UserItem index={i} key = {user.id} user ={user} setSelectedUsers={setSelectedUsers}/>\n                ))\n            )}\n        </ListContainer>\n    );\n}\n\nexport default UserList;"]},"metadata":{},"sourceType":"module"}